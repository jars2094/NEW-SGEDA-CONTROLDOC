@implements IAsyncDisposable

<div @ref="dropContainer" class="file-upload-wrapper alig" @ondragenter="OnDragEnter" @ondragover="OnDragEnter" @ondragleave="OnDragLeave">

    <!-- Spinner de carga -->
    @if (isLoading)
    {
        <div class="spinner-container">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Cargando...</span>
            </div>
        </div>
    }

    <!-- Área de carga de archivos, oculta durante la carga -->
    @if (!isLoading)
    {


        <div class="@hoverClass" style="height:100%;">
            <div class="central-container row">
                <button class="button-styles-custom col-md-4" type="button" @onclick="TriggerFileInputClick">Upload file</button>
                <span class="col-md-8 text-end">Drag the file here</span>
            </div>
        </div>

    }



    <InputFile @ref="inputFile" id="inputFileElement" multiple OnChange="OnChange" style="display: none;" />

</div>
<!-- Tabla de archivos subidos, oculta durante la carga -->
@if (!isLoading && fileInfos.Count > 0)
{
    <div class="table-responsive custom-table-container mt-1">
        @foreach (var fileInfo in fileInfos)
        {
            <div class="row p-2">
                <div class="col-md-3">
                    <img src="../img/deleteIcon.svg" alt="Delete Icon" style="width: 20px; height: 20px; cursor: pointer;" @onclick="() => DeleteFileModalOpen(fileInfo)" />
                </div>
                <div class="col-md-9 text-end align-items-center">
                    <i class="@fileInfo.IconPath" style="font-size: 18px;"></i>
                    <span>@fileInfo.Name@fileInfo.Extension</span>
                </div>
            </div>
        }
    </div>
}
<ModalNotificationsComponent @ref="notificationModal" OnModalClosed="HandleModalNotiClose"></ModalNotificationsComponent>